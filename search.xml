<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见的算法</title>
      <link href="/2022/10/13/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/13/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h3><p>基本查找&#x2F;顺序查找</p><p>核心：从0索引开始挨个查找</p><p>需求：定义一个方法利用基本查找，查询某个元素是否存在</p><p>数据如下：{131,,127,147,81,103,23,7,79}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">81</span>;</span><br><span class="line">        System.out.println(basicSearch(arr,number));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要的参数</span></span><br><span class="line">    <span class="comment">//1.数组</span></span><br><span class="line">    <span class="comment">//2.要查找的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找-x2F-折半查找"><a href="#二分查找-x2F-折半查找" class="headerlink" title="二分查找&#x2F;折半查找"></a>二分查找&#x2F;折半查找</h3><p>前提条件：数组中的数据必须是有序的</p><p>核心逻辑：每次排除一半的查找fanwei</p><p>1.min和max表示当前要查找的范围</p><p>2.mid是在min和max中间的</p><p>3.如果要查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1</p><p>4.如果要查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">23</span>,<span class="number">79</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySeach(arr,<span class="number">81</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySeach</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用循环查找需要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; max) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到中间的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//拿着mid的数据在数组中进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; number) &#123;</span><br><span class="line">                <span class="comment">//大于</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; number) &#123;</span><br><span class="line">                <span class="comment">//小于</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分查找改进（插值查找）"><a href="#二分查找改进（插值查找）" class="headerlink" title="二分查找改进（插值查找）"></a>二分查找改进（插值查找）</h4><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-19_19-56-52.png"></p><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>分块原则1：前一块中的最大一块，小于后一块中所有的数据（块内无序，块间有序）</p><p>分块原则2：块的数量一般等于数字的个数开根号。比如：16个数字一般分为4块左右</p><p>核心思路：先确定要查找的元素在哪一块，然后在块内挨个查找</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-22_22-40-33.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分块查找</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>, <span class="number">21</span>,<span class="number">18</span>,</span><br><span class="line">                    <span class="number">32</span>,<span class="number">23</span>,<span class="number">37</span>,<span class="number">26</span>,<span class="number">45</span>,<span class="number">34</span>,</span><br><span class="line">                    <span class="number">50</span>,<span class="number">48</span>,<span class="number">61</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组管理者三个对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line">        <span class="comment">//定义一个需要查找的数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number在那一块</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr,number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取这一块的开始索引，结束索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex;i &lt;= endIndex;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法用来确定number在哪个块中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//Block b1 = new Block(21,0,5);</span></span><br><span class="line">        <span class="comment">//Block b2 = new Block(45,6,11);</span></span><br><span class="line">        <span class="comment">//Block b3 = new Block(73,12,17);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number就在这个表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扩展的分块查找（无规律的数据）</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-22_23-11-35.png"></p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序：相邻的数据两两比较，小的放前面，大的放后面</p><p>1.第一轮循环结束，最大值已经找到，在数组的最右边</p><p>2.第二轮循环只要在剩下的元素找最大值就可以了</p><p>3.如果数组中有n个数据，总共我们只要执行n-1轮代码就可以了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length- <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序：从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较，小的放前面，大的放后面，以此类推</p><p>1.从0索引开始，跟后面的元素一一比较</p><p>2.小的放前面，大的放后面</p><p>3.第一轮循环结束后，最小的数据已经确定</p><p>4.第二轮循环从1索引开始以此类推</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序：将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素放到最后一个当成是无序的。遍历无序的数据，将遍历到的元素插入到有序序列中适当的位置，如遇到相同的数据，插在后面</p><p>N的</p><p>范围：0~最大索引</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">5</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">46</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的那一组是从哪个索引开始的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><p>递归指的是方法中调用方法本身的现象</p><p>递归方法的作用：把一个赋值的问题层层转化为一个与原问题相似的规模较小的问题来求解</p><p>书写递归的两个核心：</p><ul><li>找出口：什么时候不再调用方法</li><li>找规则：如何把大问题变成规模较小的问题</li></ul><p>递归求1~100之间的和</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number + getSum(number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>递归求阶乘</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getFactorialRecursion(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFactorialRecursion</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number * getFactorialRecursion(number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。比基准数小的全部在左边，比基准数大的全部在右边</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//参数一：需要排序的数组</span></span><br><span class="line">    <span class="comment">//参数二、需要排序数组的起始索引</span></span><br><span class="line">    <span class="comment">//参数三、需要排序数组的结束索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归的出口</span></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前找，找比基准数小的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当start和end指向同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.冒泡排序</p><ul><li>相邻的元素两两比较，小的放前面，大的放后面</li></ul><p>2.选择排序</p><ul><li>从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较，小的放前面，大的放后面</li></ul><p>3.插入排序</p><ul><li>将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可</li></ul><p>4.快速排序</p><ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start和end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的</li><li>找到之后交换start和end指向的元素，并稀罕这一过程，直到start个end处于同一个位置，该位置是基准数应存入的位置，再让基准数归位</li><li>归位后的效果：基准数左边的，比基准数小，基准数右边的，比基准数大</li></ul><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>操作数组的工具类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static toString(数组)</td><td>把数组拼接成一个字符串</td></tr><tr><td>public static int binarySearch(数组，查找的元素)</td><td>二分查找法查找元素</td></tr><tr><td>public static int[] copyOf(原数组，新数组的长度)</td><td>拷贝数组</td></tr><tr><td>public static int[] copryOfRange(原数组，起始索引，结束索引)</td><td>拷贝数组(填充元素)</td></tr><tr><td>public static void fill(数组，元素)</td><td>填充数组</td></tr><tr><td>public static void sort(数组)</td><td>按照默认方式进行数组排序</td></tr><tr><td>public static void sort(数组，排序规则)</td><td>按照指定规则排序</td></tr></tbody></table><p>使用方法：Arrays.方法(参数);</p><h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><h2 id="按照要求进行排序"><a href="#按照要求进行排序" class="headerlink" title="按照要求进行排序"></a>按照要求进行排序</h2><p>定义一个数组存储一些女朋友对象，利用Arrays中的sort方法进行排序</p><p>需求：属性有姓名、年龄、身高</p><p>需求：按照年龄的大小进行排序，年龄一样，按照身高排序，身高一样按照姓名的字母排序(姓名中不要有中文或者特殊字符)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个女朋友对象</span></span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">gf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaoshiushi&quot;</span>,<span class="number">18</span>,<span class="number">1.67</span>);</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">gf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaodaidai&quot;</span>,<span class="number">22</span>,<span class="number">1.70</span>);</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">gf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;xiaomeng&quot;</span>,<span class="number">25</span>,<span class="number">1.60</span>);</span><br><span class="line">        <span class="comment">//定义数组存储女朋友对象</span></span><br><span class="line">        GirlFriend[] arr = &#123;gf1,gf2,gf3&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用Arrays中的sort方法进行排序</span></span><br><span class="line">        Arrays.sort(arr,(o1, o2) -&gt; &#123;</span><br><span class="line">                <span class="comment">//比较规则</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line"></span><br><span class="line">                temp = temp == <span class="number">0</span> ? o1.getHeight() - o2.getHeight():temp;</span><br><span class="line"></span><br><span class="line">                temp = temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()):temp;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(temp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不死神兔"><a href="#不死神兔" class="headerlink" title="不死神兔"></a>不死神兔</h2><p>有一个很有名的数学逻辑题叫做不死神兔问题，有一对兔子，从出生后第三个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一队兔子，假如兔子都不死，问第十二个月的兔子对数为多少</p><p>特点：从第三个数据开始，是前两个数据的和（斐波那契数列）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">one</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">12</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">11</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猴吃桃子"><a href="#猴吃桃子" class="headerlink" title="猴吃桃子"></a>猴吃桃子</h2><p>有一堆桃子，第一只猴子吃了其中的一半，并多吃了一个，以后每天猴子都吃当前剩下来的一半，然后再多吃一个，第十天的时候（还没吃），发现只剩下一个桃子了，请问，最初总共多少个桃子</p><p>day10： 1</p><p>day9： （day10 + 1） *  2 &#x3D; 4</p><p>day8：（day9 + 1）* 2 &#x3D; 10</p><p>出口：day &#x3D;&#x3D; 10 剩下1</p><p>规律：每一天的桃子数量都是最后一天数量加1乘2</p><p>反向递归</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">one</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getCount(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(day &lt;= <span class="number">0</span> || day &gt;= <span class="number">11</span>)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前时间错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(day == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (getCount(day + <span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java系列之运算符</title>
      <link href="/2022/10/12/Java%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/10/12/Java%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符：对字面量或者变量进行操作的符号</p><p>表达式：用运算符把字面量或者变量连接起来，符合java语法的式子就可以称为表达式，不同运算符连接的表达式体现的是不同类型的表达式</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>算术运算符</li><li>自增自减运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>三元运算符</li><li>运算符优先级</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">3</span>+<span class="number">2</span>); <span class="comment">//5</span></span><br><span class="line">        <span class="comment">//如果在计算时有小数参与 结果可能不精确</span></span><br><span class="line">        System.out.println(<span class="number">1.1</span>+<span class="number">1.01</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除和取模"><a href="#除和取模" class="headerlink" title="除和取模"></a>除和取模</h3><p>除</p><p>注意：整数与整数计算只能得到整数  想要取到小数则需要两边任意一个为小数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">4</span> / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">2</span>); <span class="comment">//1</span></span><br><span class="line">        Sydtem.out.println(<span class="number">3.0</span> / <span class="number">2</span>);<span class="comment">//1.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模  取模、取余实际上也是做除法运算  只不过得到的是余数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">4</span> % <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="number">5</span> % <span class="number">3</span>); <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>数组拆分：键盘录入三个数，将其拆分为个位、十位、百位后，打印在控制台</p><p>公式总结：</p><ul><li>个位：数值 % 10</li><li>十位：数值  &#x2F; 10 % 10</li><li>百位：数值 &#x2F; 100 % 10</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个三位数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> number / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.println(ge);</span><br><span class="line">        System.out.println(shi);</span><br><span class="line">        System.out.println(bai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>类型转换的分类</p><ul><li>隐式转换（自动类型提升）：取值范围小的数值 转换成 取值范围大的数值</li><li>强制转换：取值范围大的数值 转换成 取值范围小的数值</li></ul><p>隐式转换</p><p>隐式转换范例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> a; <span class="comment">//值提升到了 10.0</span></span><br></pre></td></tr></table></figure><p>隐式转换小结：</p><ul><li>取值范围：byte &lt; short &lt; int &lt; long &lt; float &lt; double</li><li>什么时候需要转换：数据类型不一样 不能进行计算  需要转换成一样的才可以进行计算</li><li>取值范围小的 和取值范围大的进行运算 小的会先提升为大的数据类型 再进行运算</li><li>byte short char 三种类型的数据在运算的时候 都会直接先提升为 int 然后再进行运算</li></ul><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>请问最终的运算结果是什么类型的？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">数据类型 result = b1 + b2; <span class="comment">//int类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100L</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">20.0</span>;</span><br><span class="line">数据类型 result = i + n + d;<span class="comment">//i + n 的类型是long  （i + n) + d 的类型是double</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100L</span>;</span><br><span class="line">数据类型 result = b + s + n；<span class="comment">//int + long = long</span></span><br></pre></td></tr></table></figure><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><ul><li>如果把一个取值范围大的数值  赋值给取值范围小的变量  是不允许直接赋值的  如果一定要这样做就需要加入强制转换</li><li>格式：目标数据类型 变量名 &#x3D; (目标数据类型) 被强制转换的数据</li></ul><p>范例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a;</span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> b1 + b2;</span><br><span class="line">System.out.println(result); <span class="comment">//30</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">byte</span>) (b1 + b2);</span><br><span class="line">System.out.println(result); <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="字符串和字符的加操作"><a href="#字符串和字符的加操作" class="headerlink" title="字符串和字符的加操作"></a>字符串和字符的加操作</h3><p>字符串的“+”操作</p><ul><li>当“+”操作中出现字符串是  这个“+”是字符串连接符  会把前后数据进行拼接  产生一个新字符串</li><li>连续进行“+”操作时  从左到右逐个执行</li></ul><p>字符的“+”操作</p><ul><li>当“字符 + 字符”时会把字符通过ASCII码表查询到对应的数字再进行计算</li><li>当“字符 + 数字”时会把字符通过ASCII码表查询到对应的数字再进行计算</li></ul><p>注意单引号跟双引号：两个双引号字符相加就是拼接  两个单引号字符相加就是返回ASCII码  一边单一边双也是aa</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="string">&quot;a&quot;</span>);  <span class="comment">//aa</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;a&#x27;</span>);  <span class="comment">//194</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="string">&#x27;a&#x27;</span>);  <span class="comment">//aa</span></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p>基本用法</p><p>++或–  放到前面就是前置运算符  放到后面就是后置运算符</p><p>前置运算符：先返回值 再自加1</p><p>后置运算符：先自加1 再返回值</p><p>++或–  无论放在变量前面或者后面  单独写一行结果都是一样的</p><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">++</td><td align="center">自加</td><td align="center">变量的值加1</td></tr><tr><td align="center">–</td><td align="center">自减</td><td align="center">变量的值减1</td></tr></tbody></table><h2 id="关系运算符练习"><a href="#关系运算符练习" class="headerlink" title="关系运算符练习"></a>关系运算符练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> practice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的时髦度：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入相亲对象的时髦度：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> num1 &gt; num2;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>^  逻辑异或：相同为false，不同为true</p><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">结果和&amp;一样  但是具有短路效果</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td align="center">结果和||一样  但是具有短路效果</td></tr></tbody></table><h2 id="三元运算符和运算符的优先级"><a href="#三元运算符和运算符的优先级" class="headerlink" title="三元运算符和运算符的优先级"></a>三元运算符和运算符的优先级</h2><p>格式：关系表达式?表达式1:表达式;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &gt; b?a:b;</span><br></pre></td></tr></table></figure><p>判断两只老虎体重是否相同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一只老虎的体重：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二只老虎的体重：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> num1 == num2 ? <span class="string">&quot;相同&quot;</span> : <span class="string">&quot;不同&quot;</span>;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
